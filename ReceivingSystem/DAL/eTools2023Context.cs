// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ReceivingSystem.Entities;

namespace ReceivingSystem.DAL;

public partial class eTools2023Context : DbContext
{
    public eTools2023Context(DbContextOptions<eTools2023Context> options)
        : base(options)
    {
    }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderDetail> ReceiveOrderDetails { get; set; }

    public virtual DbSet<ReturnedOrderDetail> ReturnedOrderDetails { get; set; }

    public virtual DbSet<StockItem> StockItems { get; set; }

    public virtual DbSet<UnOrderedItem> UnOrderedItems { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderID).HasName("PK_PurchaseOrders_PurchaseOrderID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrdersVendors_VendorID");
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailID).HasName("PK_PurchaseOrderDetails_OrderDetailID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetailsPurchaseOrders_OrderID");

            entity.HasOne(d => d.StockItem).WithMany(p => p.PurchaseOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderDetailsStockItems_StockItemID");
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderID).HasName("PK_ReceiveOrders_ReceiveOrderID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.ReceiveOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrdersPurchaseOrders_OrderID");
        });

        modelBuilder.Entity<ReceiveOrderDetail>(entity =>
        {
            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReceiveOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetailsPurchaseOrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetailsReceiveOrders_ReceiveOrderID");
        });

        modelBuilder.Entity<ReturnedOrderDetail>(entity =>
        {
            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReturnedOrderDetails).HasConstraintName("FK_ReturnedOrderDetailsPurchaseOrderDetails_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnedOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnedOrderDetailsReceiveOrders_ReceiveOrder");

            entity.HasOne(d => d.UnOrderedItem).WithMany(p => p.ReturnedOrderDetails).HasConstraintName("FK_ReturnedOrderDetailsUnOrderedItems_UnOrderedItemID");
        });

        modelBuilder.Entity<StockItem>(entity =>
        {
            entity.HasKey(e => e.StockItemID).HasName("PK_StockItems_StockItemID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.StockItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StockItemsVendors_VendorID");
        });

        modelBuilder.Entity<UnOrderedItem>(entity =>
        {
            entity.HasKey(e => e.UnOrderedItemID).HasName("PK_UnOrderedItems_ItemID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.UnOrderedItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnOrderedItems_ReceiveOrderID");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorID).HasName("PK_Vendors_VendorID");

            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.ProvinceID).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}